import requests
import time
from flask import request, Flask
from flask_script import Manager, Server

app = Flask(__name__)
manage = Manager(app)
title_dict = {"firing": "告警",
              "resolved": "恢复"}


def send_msg(message):
    headers = {"Content-Type": "text/plain"}
    send_url = robot_url
    send_data = {
        "msgtype": "markdown",
        "markdown": {
            "content": f"{message['text']}"
        }
    }
    res = requests.post(url=send_url, headers=headers, json=send_data)
    print(res.text)


@app.route("/robot/send", methods=["POST"])
def prometheus_message():
    request_data = request.get_json()
    alert_name = request_data["commonLabels"]["alertname"]

    title = "[{0}]: {1} \n".format(title_dict[request_data["status"]], alert_name)
    msg = "{0} \n".format(m)

    for alert_info in request_data["alerts"]:
        tags_list = list([])
        for k in alert_info["labels"]:
            if k == "name":
                tags_list.append("{0}: {1}".format(k, alert_info["labels"][k]))
            else:
                tags_list.append("{0}: {1}".format(k, alert_info["labels"][k]))

        text = "
               "{0} \n" \
               "{1} \n" \
               "> - {2}\n" \
               "----- \n".format(
                " \n ".join(tags_list),
                "\n".join(["> - {0}: {1}".format(k, alert_info["annotations"][k]) for k in
                           alert_info["annotations"]]), alert_info["startsAt"])

        msg += text
        d_message = {
            "title": title
        }
        send_msg(d_message)
    return "success"

if __name__ == "__main__":
    manage.add_command("runserver", Server(host="0.0.0.0", port=19000))
    manage.run()
    
    
    
    
    
    
    
    
    
    
    
    
    
    

certifi==2020.6.20
chardet==3.0.4
click==7.1.2
Flask==1.1.2
Flask-Script==2.0.6
idna==2.10
itsdangerous==1.1.0
Jinja2==2.11.2
MarkupSafe==1.1.1
requests==2.24.0
urllib3==1.25.9
Werkzeug==1.0.1













groups:
    - name: 黑盒探测
      rules:
      - alert: 站点连接异常
        expr: probe_success != 1
        for: 180s
        labels:
          severity: 'critical'
        annotations:
          summary: "当前站点连接失败"



groups:
    - name: 主机告警
      rules:      
      - alert: CPU使用率过高
        expr: round((1 - avg(irate(node_cpu_seconds_total{mode="idle"}[5m])) by (instance, env, name, group)) * 100, 0.1) > 85
        for: 5m
        labels:
          severity: 'warning'
        annotations:
          description: "{{$labels.inatance}} CPU使用大于85%(目前使用:{{$value}}%)"
  
      - alert: 内存使用率过高
        expr: round((1 - (node_memory_MemAvailable_bytes / (node_memory_MemTotal_bytes)))* 100, 0.1) > 85
        for: 5m
        labels:
          severity: 'warning'
        annotations:
          description: "{{$labels.mountpoint }} 内存使用大于85%(目前使用:{{$value}}%)"
 
      - alert: 磁盘使用率过高
        expr: round(100-(node_filesystem_free_bytes{fstype=~"ext4|xfs",mountpoint!~"/etc/hostname|/etc/hosts|/etc/resolv.*"}/node_filesystem_size_bytes {fstype=~"ext4|xfs",mountpoint!~"/etc/hostname|/etc/hosts|/etc/resolv.*",env="t1"}*100), 0.1) > 85
        for: 10s
        labels:
          severity: 'warning'
        annotations:
          description: "{{$labels.mountpoint }} 磁盘分区使用大于85%(目前使用:{{$value}}%)"
          
          

https://www.python.org/ftp/python/3.6.15/Python-3.6.15.tgz

https://github.com/prometheus/alertmanager/releases/download/v0.23.0/alertmanager-0.23.0.linux-amd64.tar.gz


global: 
  resolve_timeout: 5m　　　　　　　
route:
  group_by: ['alertname', 'name']
  group_wait: 20s
  group_interval: 30s
  repeat_interval: 1h
  receiver: robot

  routes:
  - receiver: 'robot'
    continue: true
    group_wait: 10s
    match_re:
      env: ".*"

receivers:
- name: 'robot'
  webhook_configs:
  - url: http://127.0.0.1:19000/robot/send
    send_resolved: true

inhibit_rules:
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['alertname', 'dev', 'instance']
